//===============================================
// RULES
//===============================================
html, body {
  -webkitfont-smoothing: antialiased;
  text-rendering: optimizeLegibility;
}
q:before { content: open-quote; }
q:after { content: close-quote; }
:lang(en) q { quotes: '“' '”'; }
:lang(fr) q { quotes: '«' '»'; }
//===============================================
// MIXINS
//===============================================

@function gutter-h($q: 1) {
  @return rem($q * $base-unit * 1.1666);
}
@function gutter-v($q: 1) {
  @return rem($q * $base-unit);
}

// based on a gist by Razvan Onofrei: https://gist.github.com/razwan/10662500
// see https://gist.github.com/jeromev/11301969
@mixin show-baseline($unit: $base-unit, $color: rgb(0,0,0)) {
  background-image: linear-gradient(
    to bottom, 
    $color 6%, 
    transparent 6%
  );
  background-size: 100% $base-unit;
  background-position: left top;
}
@mixin snap-to-baseline($font-size: $base-font-size, $offset-top: 0, $offset-bottom: 0, $method: 2, $scale: $base-scale) {
  // number (float) of base units that can fit the font-size
  $lines-float: $font-size / $base-unit;
	// calc next integer
	$lines: ceil($lines-float);
	// calculate the new line-height
	$line-height: $base-unit * $lines / $font-size;
  @if ($font-size != $base-font-size) {
    // print the results
	  font-size: rem($font-size);
	  line-height: $line-height + em; 
  }
	$baseline-distance: ($line-height - $base-cap-ratio) / $scale;
	
	$offset-top: $offset-top * $base-unit;
	$offset-bottom: $offset-bottom * $base-unit;
	
	// METHOD 1
	// this method can relatively move down elements you may not want to
	@if ($method == 1) {
	  position: relative;
	  top: rem($baseline-distance * $font-size + $offset-top);
	  padding-bottom: rem($offset-bottom);
	}
	// METHOD 2
	// if you use this mixin only on elements that have one direction margins
	// http://csswizardry.com/2012/06/single-direction-margin-declarations/
	// you can use this method with no worries. 
	@if ($method == 2) {
    padding-top: rem($baseline-distance * $font-size + $offset-top);
    margin-bottom: rem(($line-height - $baseline-distance) * $font-size - $base-unit + $offset-bottom);
  }
}

@mixin smallcaps() {
  font-size: 0.80em;
  font-weight: bolder;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}
@mixin dropcap() {
  float:left;
  font-size: 5.18em;
  font-weight: 300;
  line-height: 0.9em;
  padding: 0 .12em 0 0;
  position: relative;
  left: -0.2em;
  margin-top: 0.1em;
  margin-left: -0.08em;
  margin-bottom: -0.1em;
}
